name: Java CI with Gradle
'on':
  push:
    branches:
      - master

env:
  PROJECT_ID: ${{ secrets.GKE_PROJECT }}
  GKE_CLUSTER: hello-cluster    # TODO: update to cluster name
  GKE_ZONE: asia-southeast2-a   # TODO: update to cluster zone
  IMAGE: ${{ github.repository }}
  DOCKER_TOKEN: ${{ secrets.DOCKERHUB_TOKEN }}
  DOCKER_USER: ${{ secrets.DOCKERHUB_USERNAME }}
  KUBE_CONFIG: ${{ secrets.KUBE_CONFIG }}

jobs:
  unittest:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Set up JDK 11
        uses: actions/setup-java@v1
        with:
          java-version: 11
      - name: Build with Gradle
        run: gradle test

  sonarqube:
    runs-on: ubuntu-latest
    needs: unittest
    steps:
      - uses: actions/checkout@v2
      - name: Set up JDK 11
        uses: actions/setup-java@v1
        with:
          java-version: 11
      - name: Sonarqube analyze
        run: gradle build && gradle sonarqube -Dsonar.projectKey=${{ secrets.SONARQUBE_PROJECT_KEY }} -Dsonar.host.url=${{ secrets.SONARQUBE_HOST }} -Dsonar.login=${{ secrets.SONARQUBE_TOKEN }}

  setup-build-publish-deploy:
    needs: sonarqube
    name: Setup, Build, Publish, and Deploy
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v2
      
      # Setup gcloud cli
      - uses: google-github-actions/setup-gcloud@master
        with:
          service_account_key: ${{ secrets.GKE_SA_KEY }}
          project_id: ${{ secrets.GKE_PROJECT }}
          export_default_credentials: true

      # Login Dockerhub      
      - uses: actions/checkout@v2
      - name: Docker login
        run: |-
          echo "$DOCKER_TOKEN" | docker login -u "$DOCKER_USER" --password-stdin
      # Build the Docker image
      - name: Build
        run: |-
          export IMAGE=$(echo $IMAGE | sed -e 's/.*\///g')
          docker build \
            --tag "$DOCKER_USER/$IMAGE:$GITHUB_SHA" \
            --build-arg GITHUB_SHA="$GITHUB_SHA" \
            --build-arg GITHUB_REF="$GITHUB_REF" \
            .
      # Push the Docker image to Google Container Registry
      - name: Publish
        run: |-
          export IMAGE=$(echo $IMAGE | sed -e 's/.*\///g')
          docker push "$DOCKER_USER/$IMAGE:$GITHUB_SHA"
      # Deploy to GKE
      - name: Deploy
        run: |-
          export IMAGE=$(echo $IMAGE | sed -e 's/.*\///g')
          cd manifests
          pwd   
          touch kube-config
          echo $KUBE_CONFIG | base64 -d > kube-config
          ls -la
          sed -i "s/IMAGE/$IMAGE/g" deployment.yaml
          sed -i "s/GITHUB_SHA/$GITHUB_SHA/g" deployment.yaml
          kubectl apply -f deployment.yaml --kubeconfig=kube-config
          kubectl apply -f hpa.yaml --kubeconfig=kube-config
          kubectl apply -f service-load-balancer.yaml --kubeconfig=kube-config
          kubectl get svc -o wide --kubeconfig=kube-config